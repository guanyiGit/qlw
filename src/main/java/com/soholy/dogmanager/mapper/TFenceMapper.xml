<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soholy.dogmanager.mapper.TFenceMapper" >
  <resultMap id="BaseResultMap" type="com.soholy.dogmanager.entity.TFence" >
    <id column="fence_id" property="fenceId" jdbcType="BIGINT" />
    <result column="fence_type" property="fenceType" jdbcType="INTEGER" />
    <result column="fence_name" property="fenceName" jdbcType="VARCHAR" />
    <result column="operator_id" property="operatorId" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="creation_time" property="creationTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    fence_id, fence_type, fence_name, operator_id, status, start_time, creation_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.soholy.dogmanager.entity.TFenceExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_fence
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_fence
    where fence_id = #{fenceId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_fence
    where fence_id = #{fenceId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.soholy.dogmanager.entity.TFenceExample" >
    delete from t_fence
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.soholy.dogmanager.entity.TFence" >
    insert into t_fence (fence_id, fence_type, fence_name, 
      operator_id, status, start_time, 
      creation_time)
    values (#{fenceId,jdbcType=BIGINT}, #{fenceType,jdbcType=INTEGER}, #{fenceName,jdbcType=VARCHAR}, 
      #{operatorId,jdbcType=BIGINT}, #{status,jdbcType=INTEGER}, #{startTime,jdbcType=TIMESTAMP}, 
      #{creationTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.soholy.dogmanager.entity.TFence" >
	<selectKey resultType="java.lang.Long" order="AFTER"
			keyProperty="fenceId">
			SELECT LAST_INSERT_ID()
	</selectKey>
    insert into t_fence
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fenceId != null" >
        fence_id,
      </if>
      <if test="fenceType != null" >
        fence_type,
      </if>
      <if test="fenceName != null" >
        fence_name,
      </if>
      <if test="operatorId != null" >
        operator_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="creationTime != null" >
        creation_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fenceId != null" >
        #{fenceId,jdbcType=BIGINT},
      </if>
      <if test="fenceType != null" >
        #{fenceType,jdbcType=INTEGER},
      </if>
      <if test="fenceName != null" >
        #{fenceName,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null" >
        #{operatorId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creationTime != null" >
        #{creationTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.soholy.dogmanager.entity.TFenceExample" resultType="java.lang.Integer" >
    select count(*) from t_fence
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_fence
    <set >
      <if test="record.fenceId != null" >
        fence_id = #{record.fenceId,jdbcType=BIGINT},
      </if>
      <if test="record.fenceType != null" >
        fence_type = #{record.fenceType,jdbcType=INTEGER},
      </if>
      <if test="record.fenceName != null" >
        fence_name = #{record.fenceName,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorId != null" >
        operator_id = #{record.operatorId,jdbcType=BIGINT},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creationTime != null" >
        creation_time = #{record.creationTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_fence
    set fence_id = #{record.fenceId,jdbcType=BIGINT},
      fence_type = #{record.fenceType,jdbcType=INTEGER},
      fence_name = #{record.fenceName,jdbcType=VARCHAR},
      operator_id = #{record.operatorId,jdbcType=BIGINT},
      status = #{record.status,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      creation_time = #{record.creationTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.soholy.dogmanager.entity.TFence" >
    update t_fence
    <set >
      <if test="fenceType != null" >
        fence_type = #{fenceType,jdbcType=INTEGER},
      </if>
      <if test="fenceName != null" >
        fence_name = #{fenceName,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null" >
        operator_id = #{operatorId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creationTime != null" >
        creation_time = #{creationTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where fence_id = #{fenceId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.soholy.dogmanager.entity.TFence" >
    update t_fence
    set fence_type = #{fenceType,jdbcType=INTEGER},
      fence_name = #{fenceName,jdbcType=VARCHAR},
      operator_id = #{operatorId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      creation_time = #{creationTime,jdbcType=TIMESTAMP}
    where fence_id = #{fenceId,jdbcType=BIGINT}
  </update>
  
  <select id="selectFences" resultMap="BaseResultMap" parameterType="java.lang.Long">
  		select <include refid="Base_Column_List"/> from t_fence
  		<where>
  			<if test="operatorId != null  and operatorId != -1">
  				operator_id = #{operatorId}
  			</if>
  		</where>
  </select>
</mapper>