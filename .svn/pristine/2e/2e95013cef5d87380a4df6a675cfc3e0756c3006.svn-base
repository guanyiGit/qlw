<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soholy.dogmanager.mapper.TRoleRefResourcesMapper">
	<resultMap id="BaseResultMap"
		type="com.soholy.dogmanager.entity.TRoleRefResources">
		<id column="role_ref_resources_id" property="roleRefResourcesId"
			jdbcType="INTEGER" />
		<result column="role_id" property="roleId" jdbcType="INTEGER" />
		<result column="resources_id" property="resourcesId" jdbcType="INTEGER" />
		<result column="have_lev_status" property="haveLevStatus"
			jdbcType="INTEGER" />
		<result column="creation_time" property="creationTime"
			jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		role_ref_resources_id, role_id, resources_id,
		have_lev_status, creation_time
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.soholy.dogmanager.entity.TRoleRefResourcesExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from t_role_ref_resources
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_role_ref_resources
		where role_ref_resources_id =
		#{roleRefResourcesId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		t_role_ref_resources
		where role_ref_resources_id =
		#{roleRefResourcesId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.soholy.dogmanager.entity.TRoleRefResourcesExample">
		delete from t_role_ref_resources
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>

	<insert id="insertSelective" parameterType="com.soholy.dogmanager.entity.TRoleRefResources">
		insert into t_role_ref_resources
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="roleRefResourcesId != null">
				role_ref_resources_id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
			<if test="resourcesId != null">
				resources_id,
			</if>
			<if test="haveLevStatus != null">
				have_lev_status,
			</if>
			<if test="creationTime != null">
				creation_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="roleRefResourcesId != null">
				#{roleRefResourcesId,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=INTEGER},
			</if>
			<if test="resourcesId != null">
				#{resourcesId,jdbcType=INTEGER},
			</if>
			<if test="haveLevStatus != null">
				#{haveLevStatus,jdbcType=INTEGER},
			</if>
			<if test="creationTime != null">
				#{creationTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.soholy.dogmanager.entity.TRoleRefResourcesExample"
		resultType="java.lang.Integer">
		select count(*) from t_role_ref_resources
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update t_role_ref_resources
		<set>
			<if test="record.roleRefResourcesId != null">
				role_ref_resources_id =
				#{record.roleRefResourcesId,jdbcType=INTEGER},
			</if>
			<if test="record.roleId != null">
				role_id = #{record.roleId,jdbcType=INTEGER},
			</if>
			<if test="record.resourcesId != null">
				resources_id = #{record.resourcesId,jdbcType=INTEGER},
			</if>
			<if test="record.haveLevStatus != null">
				have_lev_status =
				#{record.haveLevStatus,jdbcType=INTEGER},
			</if>
			<if test="record.creationTime != null">
				creation_time =
				#{record.creationTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update t_role_ref_resources
		set role_ref_resources_id =
		#{record.roleRefResourcesId,jdbcType=INTEGER},
		role_id =
		#{record.roleId,jdbcType=INTEGER},
		resources_id =
		#{record.resourcesId,jdbcType=INTEGER},
		have_lev_status =
		#{record.haveLevStatus,jdbcType=INTEGER},
		creation_time =
		#{record.creationTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.soholy.dogmanager.entity.TRoleRefResources">
		update t_role_ref_resources
		<set>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=INTEGER},
			</if>
			<if test="resourcesId != null">
				resources_id = #{resourcesId,jdbcType=INTEGER},
			</if>
			<if test="haveLevStatus != null">
				have_lev_status = #{haveLevStatus,jdbcType=INTEGER},
			</if>
			<if test="creationTime != null">
				creation_time = #{creationTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where role_ref_resources_id = #{roleRefResourcesId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.soholy.dogmanager.entity.TRoleRefResources">
		update
		t_role_ref_resources
		set role_id = #{roleId,jdbcType=INTEGER},
		resources_id = #{resourcesId,jdbcType=INTEGER},
		have_lev_status =
		#{haveLevStatus,jdbcType=INTEGER},
		creation_time =
		#{creationTime,jdbcType=TIMESTAMP}
		where role_ref_resources_id =
		#{roleRefResourcesId,jdbcType=INTEGER}
	</update>


	<insert id="addRoleRefResources" parameterType="java.util.List">
		insert into t_role_ref_resources (role_ref_resources_id, role_id,
		resources_id,
		have_lev_status, creation_time)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(
			#{item.roleRefResourcesId},
			#{item.roleId},
			#{item.resourcesId},
			#{item.haveLevStatus},
			#{item.creationTime}
			)
		</foreach>
	</insert>

	<delete id="deleteRoleRefResourcesByRoleId" parameterType="java.lang.Integer">
		delete from t_role_ref_resources
		<where>
			role_id = #{roleId}
		</where>
	</delete>

	<delete id="deleteRoleRefResourcesByResourcesId" parameterType="java.lang.Integer">
		delete from t_role_ref_resources
		<where>
			resources_id = #{resourcesId}
		</where>
	</delete>

	<select id="selectByRoleId" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_role_ref_resources
		<where>
			role_id = #{roleId}
		</where>
	</select>

	<select id="selectByResourcesId" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_role_ref_resources
		<where>
			resources_id = #{resourcesId}
		</where>
	</select>
	
	<delete id="deleteRoleRefResources" parameterType="java.util.List">
		delete from t_role_ref_resources where role_ref_resources_id in
		<foreach collection="list" item="item" open="(" separator=","
			close=")">
			#{item.roleRefResourcesId}
		</foreach>
	</delete>
	
</mapper>